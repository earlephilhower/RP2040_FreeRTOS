<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CurrentWorkingDirectory</key>
	<string>/Users/hermann/Documents/Arduino/libraries/FreeRTOS_RP2040/src</string>
	<key>WorksheetContents</key>
	<string>cd ~/Documents/Arduino/libraries/FreeRTOS_RP2040/src
ls
grep vTaskDelay *.c *.h
port.c:            vTaskDelay(uxTicksToWait);

tasks.c:#if ( INCLUDE_vTaskDelay == 1 )
tasks.c:    void vTaskDelay( const TickType_t xTicksToDelay )
tasks.c:#endif /* INCLUDE_vTaskDelay */
FreeRTOSConfig.h:#define INCLUDE_vTaskDelayUntil			1

FreeRTOSConfig.h:#define INCLUDE_vTaskDelay				1

RP2040_FreeRTOS.h:    #ifdef INCLUDE_vTaskDelayUntil
RP2040_FreeRTOS.h:        /* INCLUDE_vTaskDelayUntil was replaced by INCLUDE_xTaskDelayUntil.  Backward
RP2040_FreeRTOS.h:        #error INCLUDE_vTaskDelayUntil and INCLUDE_xTaskDelayUntil are both defined.  INCLUDE_vTaskDelayUntil is no longer required and should be removed
RP2040_FreeRTOS.h:    #ifdef INCLUDE_vTaskDelayUntil
RP2040_FreeRTOS.h:        /* If INCLUDE_vTaskDelayUntil is set but INCLUDE_xTaskDelayUntil is not then
RP2040_FreeRTOS.h:         * INCLUDE_vTaskDelayUntil is set to will ensure backward compatibility.
RP2040_FreeRTOS.h:        #define INCLUDE_xTaskDelayUntil INCLUDE_vTaskDelayUntil
RP2040_FreeRTOS.h:#ifndef INCLUDE_vTaskDelay
RP2040_FreeRTOS.h:    #define INCLUDE_vTaskDelay    0
mpu_prototypes.h:void MPU_vTaskDelay( const TickType_t xTicksToDelay ) FREERTOS_SYSTEM_CALL;
mpu_wrappers.h:        #define vTaskDelay                             MPU_vTaskDelay
task.h: * void vTaskDelay( const TickType_t xTicksToDelay );
task.h: * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.
task.h: * vTaskDelay() specifies a time at which the task wishes to unblock relative to
task.h: * the time at which vTaskDelay() is called.  For example, specifying a block
task.h: * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method
task.h: * at which vTaskDelay() gets called and therefore the time at which the task
task.h: *       vTaskDelay( xDelay );
task.h: * \defgroup vTaskDelay vTaskDelay
task.h:void vTaskDelay( const TickType_t xTicksToDelay ) PRIVILEGED_FUNCTION;
task.h: * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will
task.h: * cause a task to block for the specified number of ticks from the time vTaskDelay () is
task.h: * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed
task.h: * calling vTaskDelay () may not be fixed [the task may take a different path though the
task.h: * Whereas vTaskDelay () specifies a wake time relative to the time at which the function
task.h: * vTaskDelayUntil() is the older version of xTaskDelayUntil() and does not
task.h:#define vTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement )       \
task.h: * as when vTaskDelay() is called, or an event on an object, such as when
</string>
</dict>
</plist>
